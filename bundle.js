(()=>{"use strict";var t={791:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(942),i=n.n(r),o=n(278),a=n.n(o)()(i());a.push([t.id,'#savedCitiesList {\n  border-top: 1px dashed #000;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style-type: none;\n  padding: 20px;\n  gap: 20px;\n  cursor: pointer;\n}\n\n#app {\n  max-width: 1440px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n#currentWeather {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n}\n#inputGroup {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n}\n\n#map {\n  margin: 40px;\n  width: 100%;\n  height: 400px;\n}\n\n.ymap {\n  display: block;\n  margin: 0 auto;\n}\n\n#currentTemp,\n#currentCity {\n  font-size: 24px;\n  font-weight: 700;\n}\n#currentTemp::after {\n  content: " °C";\n}\n',"",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,aAAa;EACb,eAAe;EACf,8BAA8B;EAC9B,qBAAqB;EACrB,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;AACA;EACE,aAAa;EACb,eAAe;EACf,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,aAAa;AACf;;AAEA;EACE,cAAc;EACd,cAAc;AAChB;;AAEA;;EAEE,eAAe;EACf,gBAAgB;AAClB;AACA;EACE,cAAc;AAChB",sourcesContent:['#savedCitiesList {\n  border-top: 1px dashed #000;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style-type: none;\n  padding: 20px;\n  gap: 20px;\n  cursor: pointer;\n}\n\n#app {\n  max-width: 1440px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n#currentWeather {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n}\n#inputGroup {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n}\n\n#map {\n  margin: 40px;\n  width: 100%;\n  height: 400px;\n}\n\n.ymap {\n  display: block;\n  margin: 0 auto;\n}\n\n#currentTemp,\n#currentCity {\n  font-size: 24px;\n  font-weight: 700;\n}\n#currentTemp::after {\n  content: " °C";\n}\n'],sourceRoot:""}]);const s=a},278:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<t.length;u++){var p=[].concat(t[u]);r&&a[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),i&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=i):p[4]="".concat(i)),e.push(p))}},e}},942:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},292:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var c=t[s],u=r.base?c[0]+r.base:c[0],p=o[u]||0,l="".concat(u," ").concat(p);o[u]=p+1;var f=n(l),d={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var h=i(d,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:h,references:1})}a.push(l)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var c=r(t,i),u=0;u<o.length;u++){var p=n(o[u]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}o=c}}},383:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},88:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},884:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},893:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},997:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(292),e=n.n(t),r=n(893),i=n.n(r),o=n(383),a=n.n(o),s=n(884),c=n.n(s),u=n(88),p=n.n(u),l=n(997),f=n.n(l),d=n(791),h={};h.styleTagTransform=f(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=p(),e()(d.A,h),d.A&&d.A.locals&&d.A.locals;const A="cities",m={cities:[],listeners:[],init(){this.loadItems()},loadItems(){return this.cities=function(t){let e;try{const n=localStorage.getItem(t);e=null===n?null:JSON.parse(n)}catch(t){e=null}return e}(A)||[],this.cities},saveItems(){!function(t,e){const n=JSON.stringify(e);localStorage.setItem(t,n)}(A,this.cities)},addCity(t){if(!t)return!1;const e=t.toUpperCase(),n=[e];for(let t=0;t<this.cities.length;t+=1)this.cities[t]!==e&&n.push(this.cities[t]);return 11===n.length&&n.pop(),this.cities=n,this.saveItems(),this.listeners.forEach((t=>t(this.cities))),e},subscribe(t){this.listeners.push(t)}};function y(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function v(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?y(Object(n),!0).forEach((function(e){var r,i,o,a;r=t,i=e,o=n[e],(i="symbol"==typeof(a=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i))?a:String(a))in r?Object.defineProperty(r,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[i]=o})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function b(t,e){const n=e.split(".");let r=t,i=0;for(;i<n.length;){const t=n[i];if(!r[t])return;r=r[t],i+=1}return r}function g(t,e){let n=t;return Array.from(t.matchAll(/\{\{for (\w+) as (\w+)\}\}([\s\S]+?)\{\{endfor\}\}/g)).forEach((t=>{const r=t[1],i=t[2],o=t[3],a=e[r]||[];let s="";a.forEach(((t,n)=>{const r=n===a.length-1,c=n!==a.length-1,u=0===n,p=0!==n;s+=g(o,v(v({},e),{},{[i]:t,index:n,isFirst:u,isLast:r,isNotFirst:p,isNotLast:c}))})),n=n.replace(t[0],s)})),Array.from(t.matchAll(/\{\{if (\w+.?\w+)\}\}([\s\S]+?)\{\{endif\}\}/g)).forEach((t=>{const r=t[1],i=t[2];let o=e[r];r.includes(".")&&(o=b(e,r)),n=o?n.replace(t[0],i):n.replace(t[0],"")})),Array.from(t.matchAll(/\{\{((\w+)(\.?\w+)*)\}\}/g)).forEach((t=>{const r=t[1];let i="";void 0!==e[r]&&(i=String(e[r])),r.includes(".")&&(i=b(e,r)),n=null!=i?n.replace(t[0],i):n.replace(t[0],i||"")})),n}function C(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function E(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?C(Object(n),!0).forEach((function(e){w(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function w(t,e,n){var r;return(e="symbol"==typeof(r=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?r:String(r))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}class x{constructor(t,e){w(this,"state",{}),w(this,"events",{}),this.el=t,this.el=t,setTimeout((()=>{this.setState(e),this.setEventHandlers()}),0)}setEventHandlers(){Object.entries(this.events).forEach((([t,e])=>{const[n,r]=t.split("@");this.el.addEventListener(n,(t=>{t.target.matches(r)&&e(t)}))}))}setState(t){void 0!==t&&(this.state=E(E({},this.state),t)),this.el.innerHTML=g(this.render(),this.state)}onMount(t){const{innerHTML:e}=t;this.el.innerHTML=e}render(){return this.el.innerHTML}}function j(t,e,n){var r;return(e="symbol"==typeof(r=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?r:String(r))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const O=function(t,e,n){const r=document.createElement("div");return r.id="app",t.append(r),r}(document.body);new class extends x{constructor(t,e){super(t,e),j(this,"onSubmit",(t=>{t.preventDefault();const e=this.el.querySelector("#inputCity"),n=e.value.trim();""!==n&&(this.updateWeather(n),e.value="")})),j(this,"onCitySelect",(t=>{t.preventDefault();const e=t.target.innerHTML;this.updateWeather(e)})),j(this,"updateWeather",(async t=>{const e=await async function(t,e="ru"){const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=ab4639f5754271e773ed6d3ffd73f327&units=metric&lang=${e}`),r=await n.json();let i,o,a,s;return 200!==r.cod?null:(i=r.name,o=String(Math.round(r.main.temp)),a=r.weather[0].icon,s=[r.coord.lon,r.coord.lat],{city:i,temp:o,icon:a,coord:s})}(t);null!==e&&(this.setState({currentCity:e.city,currentTemp:e.temp,currentIcon:e.icon,coord:{lat:e.coord[0],lon:e.coord[1]}}),m.addCity(e.city))})),j(this,"events",{"submit@form#inputGroup":this.onSubmit,"click@li.savedCity":this.onCitySelect}),m.init(),m.subscribe((()=>{this.setState({cities:m.cities})}))}init(){(void 0!==this.state.currentCity?new Promise((t=>{t(this.state.currentCity)})):async function(){const t=await fetch("https://get.geojs.io/v1/ip/geo.json");return(await t.json()).city}()).then((t=>this.updateWeather(t))).then((()=>{this.onMount(this.el),this.setEventHandlers()}))}render(){return'\n    <h1 id="header">Прогноз погоды</h1>\n    <div id="currentWeather">\n      <div id="currentCity">{{if currentCity}}{{currentCity}}{{endif}}</div>\n      <div id="currentTemp">{{if currentTemp}}{{currentTemp}}{{endif}}</div>\n      <div id="currentIcon">\n      {{if currentIcon}}<img src="https://openweathermap.org/img/wn/{{currentIcon}}@2x.png">{{endif}}\n      </div>\n    </div>\n    <form id="inputGroup"><input id="inputCity" placeholder="Enter city">\n    <button type="submit" id="submitBtn">Получить погоду</button>\n    </form>\n    <ul id="savedCitiesList">\n      {{for cities as city}}\n        <li class="savedCity">{{city}}</li>\n      {{endfor}}\n    </ul>\n    <div id="map">{{if coord}}\n    <img class="ymap" src="https://static-maps.yandex.ru/v1?ll={{coord.lat}},{{coord.lon}}&lang=ru_RU&z=12&pt={{coord.lat}},{{coord.lon}},comma&apikey=b7d16e2b-938b-4809-b74b-5ae97b162f00">\n    {{endif}}</div>'}}(O,{currentCity:"tula"}).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,